{"version":3,"file":"FileSystem.types.js","sourceRoot":"","sources":["../src/FileSystem.types.ts"],"names":[],"mappings":"AAmDA,MAAM,CAAN,IAAY,YAGX;AAHD,WAAY,YAAY;IACtB,6BAAa,CAAA;IACb,iCAAiB,CAAA;AACnB,CAAC,EAHW,YAAY,KAAZ,YAAY,QAGvB;AAED,MAAM,CAAN,IAAY,qBAIX;AAJD,WAAY,qBAAqB;IAC/B,iEAAQ,CAAA;IACR,+DAAO,CAAA;IACP,mEAAS,CAAA;AACX,CAAC,EAJW,qBAAqB,KAArB,qBAAqB,QAIhC;AAED,MAAM,CAAN,IAAY,sBAuBX;AAvBD,WAAY,sBAAsB;IAChC,mEAAQ,CAAA;IACR,qEAAS,CAAA;IACT,2EAAY,CAAA;IACZ,iFAAe,CAAA;IACf,6EAAa,CAAA;IACb,uEAAU,CAAA;IACV,qFAAiB,CAAA;IACjB,2EAAY,CAAA;IACZ,6EAAa,CAAA;IACb,yEAAW,CAAA;IACX,sFAAkB,CAAA;IAClB,sFAAkB,CAAA;IAClB,sFAAkB,CAAA;IAClB,sFAAkB,CAAA;IAClB,sFAAkB,CAAA;IAClB,8EAAc,CAAA;IACd,gFAAe,CAAA;IACf,wFAAmB,CAAA;IACnB,8FAAsB,CAAA;IACtB,sEAAU,CAAA;IACV,wFAAmB,CAAA;IACnB,8FAAsB,CAAA;AACxB,CAAC,EAvBW,sBAAsB,KAAtB,sBAAsB,QAuBjC","sourcesContent":["export type DownloadOptions = {\n  md5?: boolean;\n  cache?: boolean;\n  headers?: { [name: string]: string };\n};\n\nexport type DownloadResult = {\n  uri: string;\n  status: number;\n  headers: { [name: string]: string };\n  md5?: string;\n};\n\nexport type UploadOptions = {\n  headers?: { [name: string]: string };\n  httpMethod?: FileSystemHttpMethods;\n  bodyEncoding?: FileSystemBodyEncoding;\n};\n\nexport type DownloadProgressCallback = (data: DownloadProgressData) => void;\n\nexport type DownloadProgressData = {\n  totalBytesWritten: number;\n  totalBytesExpectedToWrite: number;\n};\n\nexport type DownloadPauseState = {\n  url: string;\n  fileUri: string;\n  options: DownloadOptions;\n  resumeData?: string;\n};\n\nexport type FileInfo =\n  | {\n      exists: true;\n      uri: string;\n      size: number;\n      isDirectory: boolean;\n      modificationTime: number;\n      md5?: string;\n    }\n  | {\n      exists: false;\n      uri: string;\n      size: undefined;\n      isDirectory: false;\n      modificationTime: undefined;\n      md5: undefined;\n    };\n\nexport enum EncodingType {\n  UTF8 = 'utf8',\n  Base64 = 'base64',\n}\n\nexport enum FileSystemHttpMethods {\n  POST = 0,\n  PUT = 1,\n  PATCH = 2,\n}\n\nexport enum FileSystemBodyEncoding {\n  UTF8 = 0,\n  ASCII = 1,\n  NEXTSTEP = 2,\n  JapaneseEUC = 3,\n  ISOLatin1 = 4,\n  Symbol = 5,\n  NonLossyASCII = 6,\n  ShiftJIS = 7,\n  ISOLatin2 = 8,\n  Unicode = 9,\n  WindowsCP1251 = 10,\n  WindowsCP1252 = 11,\n  WindowsCP1253 = 12,\n  WindowsCP1254 = 13,\n  WindowsCP1250 = 14,\n  ISO2022JP = 15,\n  MacOSRoman = 16,\n  UTF16BigEndian = 17,\n  UTF16LittleEndian = 18,\n  UTF32 = 19,\n  UTF32BigEndian = 20,\n  UTF32LittleEndian = 21,\n}\n\nexport type ReadingOptions = {\n  encoding?: EncodingType | 'utf8' | 'base64';\n  position?: number;\n  length?: number;\n};\n\nexport type WritingOptions = {\n  encoding?: EncodingType | 'utf8' | 'base64';\n};\n\nexport type ProgressEvent = {\n  uuid: string;\n  data: {\n    totalBytesWritten: number;\n    totalBytesExpectedToWrite: number;\n  };\n};\n\ntype PlatformMethod = (...args: any[]) => Promise<any>;\n\nexport interface ExponentFileSystemModule {\n  readonly name: 'ExponentFileSystem';\n  readonly documentDirectory: string | null;\n  readonly cacheDirectory: string | null;\n  readonly bundledAssets: string | null;\n  readonly bundleDirectory: string | null;\n  readonly getInfoAsync?: PlatformMethod;\n  readonly readAsStringAsync?: PlatformMethod;\n  readonly writeAsStringAsync?: PlatformMethod;\n  readonly deleteAsync?: PlatformMethod;\n  readonly moveAsync?: PlatformMethod;\n  readonly copyAsync?: PlatformMethod;\n  readonly makeDirectoryAsync?: PlatformMethod;\n  readonly readDirectoryAsync?: PlatformMethod;\n  readonly downloadAsync?: PlatformMethod;\n  readonly uploadAsync?: PlatformMethod;\n  readonly downloadResumableStartAsync?: PlatformMethod;\n  readonly downloadResumablePauseAsync?: PlatformMethod;\n  readonly getContentUriAsync?: PlatformMethod;\n  readonly getFreeDiskStorageAsync?: PlatformMethod;\n  readonly getTotalDiskCapacityAsync?: PlatformMethod;\n  startObserving?: () => void;\n  stopObserving?: () => void;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n}\n"]}